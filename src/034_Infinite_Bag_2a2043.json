{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 0.37256,
    "r": 0.30589
  },
  "ContainedObjects": [
    {
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 3.061,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": 2.313,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": 1.574,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": 0.826,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": 0.078,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": -0.661,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": -1.409,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": -2.148,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": -2.896,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": -3.644,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": -4.383,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        },
        {
          "Position": {
            "x": -5.13,
            "y": 0,
            "z": -0.295
          },
          "Rotation": {
            "x": 0,
            "y": 180,
            "z": 0
          },
          "Tags": [
            "dice"
          ]
        }
      ],
      "Autoraise": true,
      "ColorDiffuse": {
        "b": 0.25097,
        "g": 0.25097,
        "r": 0.25097
      },
      "CustomImage": {
        "CustomTile": {
          "Stackable": false,
          "Stretch": true,
          "Thickness": 0.2,
          "Type": 0
        },
        "ImageScalar": 1,
        "ImageSecondaryURL": "",
        "ImageURL": "https://drive.google.com/uc?export=view&id=1oA8dVYfiOiNQ9J7h4AHUemLW0HdEhKzA",
        "WidthScale": 0
      },
      "CustomUIAssets": [
        {
          "Name": "reeoll_icon",
          "Type": 0,
          "URL": "https://drive.google.com/uc?export=view&id=1ezIviP4ov0vARD5GBuExTCpPsMbBGL0B"
        },
        {
          "Name": "Fonts",
          "Type": 1,
          "URL": "https://drive.google.com/uc?export=view&id=18_lFlnSaOFlbNVfE-G-LFqqfptMMkKFS"
        }
      ],
      "Description": "",
      "DragSelectable": true,
      "GMNotes": "",
      "GUID": "91141f",
      "Grid": true,
      "GridProjection": false,
      "Hands": false,
      "HideWhenFaceDown": false,
      "IgnoreFoW": false,
      "LayoutGroupSortIndex": 0,
      "Locked": false,
      "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\n--serpent = require(\"util/serpent\")\r\n\r\nlocal rollerData = {\r\n  type = 1,\r\n  lastType = 1\r\n}\r\n\r\nfunction onLoad()\r\n  self.interactable = true\r\n\r\n  --   position = {\r\n  --   x = 3.0608136653900146,\r\n  --   y = 0.20000040531158447,\r\n  --   z = -0.29565337300300598\r\n  -- },\r\n\r\n  local sps = self.getSnapPoints()\r\n\r\n  for i, sp in pairs(sps) do\r\n    sp.tags = {\"Dice\"}\r\n    sp.rotation = {0, 180, 0}\r\n    sp.position = sp.position:setAt(\"y\", 0):setAt(\"z\", -0.295)\r\n  end\r\n\r\n  self.setSnapPoints(sps)\r\n\r\n  --  print(serpent.tts(self.getSnapPoints()))\r\n\r\n  --  print(serpent.tts(oData))\r\n  --   local clone = spawnObjectData({\r\n  --     data = oData\r\n  --   })\r\nend\r\n\r\nfunction hoverResultsEnter(_, _, _)\r\n  self.UI.setAttribute(\"results_default\", \"active\", \"false\")\r\n  self.UI.setAttribute(\"results_hover\", \"active\", \"true\")\r\nend\r\n\r\nfunction hoverResultsExit(_, _, _)\r\n  self.UI.setAttribute(\"results_default\", \"active\", \"true\")\r\n  self.UI.setAttribute(\"results_hover\", \"active\", \"false\")\r\nend\r\n\r\nlocal numberSet = {}\r\nlocal rerollId = nil\r\nlocal isRolling = false\r\nfunction dice_btn(playerColor, alt_click, id)\r\n  if isRolling then\r\n    return\r\n  end\r\n\r\n  local current_number = tonumber(id:match(\"%d+\"))\r\n  local current_color\r\n  if alt_click == \"-1\" then\r\n    if getSetSize(numberSet) ~= 0 then\r\n      return\r\n    end\r\n    \r\n    rollerData.type = Global.call(\"getRollerType\", playerColor) or 1\r\n\r\n    local removeAllDices = false\r\n    if rollerData.type ~= rollerData.lastType then\r\n      removeAllDices = true\r\n      rollerData.lastType = rollerData.type\r\n    end\r\n\r\n    isRolling = true\r\n    self.UI.setAttribute(\"reroll\", \"text\", 0)\r\n    self.UI.setAttribute(\"reroll\", \"color\", \"#a29c90\")\r\n\r\n    self.UI.setAttribute(\"rerolled_dices\", \"text\", 0)\r\n    self.UI.setAttribute(\"rerolled_dices\", \"color\", \"#a29c90\")\r\n    \r\n    self.UI.setAttribute(\"success\", \"text\", \"?\")\r\n    self.UI.setAttribute(\"success\", \"color\", \"#a29c90\")\r\n\r\n    self.UI.setAttribute(\"success_additional\", \"text\", \"?\")\r\n    self.UI.setAttribute(\"success_additional\", \"color\", \"#a29c90\")\r\n\r\n    -- local sps = self.getSnapPoints()\r\n\r\n    -- local objects = upCast(self, 1, nil, 1)\r\n    -- for _, obj in pairs(objects) do\r\n    --   if obj.hasTag(\"Dice\") then\r\n    --     obj.destruct()\r\n    --   else\r\n    --     local p = self.getPosition():setAt(\"y\", 3)\r\n    --     obj.setPosition(p:setAt(\"z\", p.z-self.getBoundsNormalized().size.z))\r\n    --   end\r\n    -- end\r\n\r\n    local sps = self.getSnapPoints()\r\n    local countFinishedDice = 0\r\n    local total = 0\r\n    for i = 1, 12 do\r\n\r\n      local p = self.positionToWorld(sps[i].position):setAt(\"y\", 2.7)\r\n      local s = 0.2\r\n      local hits = Physics.cast({\r\n        origin = p,\r\n        direction = {0, 1, 0},\r\n        type = 3,\r\n        size = {s, s, s},\r\n        orientation = {0, 0, 0},\r\n        max_distance = 0,\r\n        debug = false\r\n      })\r\n\r\n      local obj = nil\r\n      for _, v in pairs(hits) do\r\n        if v.hit_object ~= self and v.hit_object and v.hit_object.guid then\r\n          if v.hit_object.hasTag(\"Dice\") then\r\n            if not obj and not removeAllDices then\r\n              obj = v.hit_object\r\n            else\r\n              v.hit_object.destruct()\r\n            end\r\n          else\r\n            local p = self.getPosition():setAt(\"y\", 3)\r\n            v.hit_object.setPosition(p:setAt(\"z\", p.z - self.getBoundsNormalized().size.z))\r\n          end\r\n        end\r\n      end\r\n\r\n      if i > current_number then\r\n        self.UI.setAttribute(\"dice_\" .. i, \"text\", i)\r\n        self.UI.setAttribute(\"dice_\" .. i, \"textColor\", \"#4d4a44\")\r\n        self.UI.setAttribute(\"icon_dice_\" .. i, \"active\", \"false\")\r\n\r\n        if obj then\r\n          obj.destruct()\r\n        end\r\n      else\r\n\r\n        if not obj then\r\n          obj = spawnObjectData({\r\n            data = getDiceData(p:setAt(\"y\", 1 + 0.523))\r\n          })\r\n        end\r\n\r\n        obj.interactable = false\r\n        Wait.time(function()\r\n          local pos = obj.getPosition() + Vector(0, 0, 5)\r\n          obj.setPositionSmooth(pos, false, true)\r\n          Wait.time(function()\r\n            obj.setAngularVelocity(Vector(50, 50, 50))\r\n            runAfterRest(obj, function(obj)\r\n              obj.randomize()\r\n              runAfterRest(obj, function(obj)\r\n                for _, rv in pairs(obj.getRotationValues()) do\r\n                  if rv.value == obj.getRotationValue() then\r\n\r\n                    if issuccesss(rv.value) then\r\n                      total = total + 1\r\n                      self.UI.setAttribute(\"success\", \"text\", total)\r\n                      self.UI.setAttribute(\"success\", \"color\", \"#fff5e2\")\r\n                    end\r\n\r\n                    obj.setRotation(rv.rotation)\r\n                    obj.setPositionSmooth(p:setAt(\"z\", p.z):setAt(\"y\", 2.57), false, true)\r\n                    runAfterRest(obj, function(obj)\r\n                      obj.setRotation(rv.rotation)\r\n                      obj.interactable = true\r\n                      countFinishedDice = countFinishedDice + 1\r\n\r\n                      if countFinishedDice == current_number then\r\n                        isRolling = false\r\n                        setSucess(total, playerColor)\r\n                      end\r\n                    end)\r\n                  end\r\n                end\r\n              end)\r\n            end)\r\n          end, 0.3)\r\n        end, 1)\r\n\r\n        self.UI.setAttribute(\"dice_\" .. i, \"text\", i)\r\n        self.UI.setAttribute(\"dice_\" .. i, \"textColor\", \"#fff5e2\")\r\n      end\r\n    end\r\n  elseif alt_click == \"-2\" then\r\n    if rerollId then\r\n      Wait.stop(rerollId)\r\n      rerollId = nil\r\n    end\r\n\r\n    if self.UI.getAttribute(id, \"textColor\") == \"#4d4a44\" then\r\n      return\r\n    end\r\n\r\n    if self.UI.getAttribute(\"icon_\" .. id, \"active\") == \"false\" then\r\n      current_color = self.UI.getAttribute(id, \"textColor\")\r\n      self.UI.setAttribute(id, \"text\", \"\")\r\n      self.UI.setAttribute(id, \"textColor\", current_color)\r\n      self.UI.setAttribute(\"icon_\" .. id, \"active\", \"true\")\r\n      numberSet[current_number] = true\r\n    elseif self.UI.getAttribute(\"icon_\" .. id, \"active\") == \"true\" then\r\n      current_color = self.UI.getAttribute(id, \"textColor\")\r\n      self.UI.setAttribute(id, \"text\", id:match(\"%d+\"))\r\n      self.UI.setAttribute(id, \"textColor\", current_color)\r\n      self.UI.setAttribute(\"icon_\" .. id, \"active\", \"false\")\r\n      numberSet[current_number] = nil\r\n    end\r\n\r\n    rerollId = Wait.time(function()\r\n      local nSelected = getSetSize(numberSet)\r\n      if nSelected == 0 then\r\n        isRolling = false\r\n        return\r\n      end\r\n\r\n      isRolling = true\r\n\r\n      local total = tonumber(self.UI.getAttribute(\"success\", \"text\"))\r\n      local countFinishedDice = 0\r\n      for i = 1, 12 do\r\n\r\n        local color = self.UI.getAttribute(\"dice_\" .. i, \"textColor\")\r\n        if color ~= \"#4d4a44\" then\r\n          -- a29c90 -- successs\r\n          -- #fff5e2 - white\r\n          -- 4d4a44 - gray\r\n          if self.UI.getAttribute(\"icon_dice_\" .. i, \"active\") == \"true\" then\r\n\r\n            local sps = self.getSnapPoints()\r\n            local p = self.positionToWorld(sps[i].position):setAt(\"y\", 2.7)\r\n            local s = 0.5\r\n            local hits = Physics.cast({\r\n              origin = p,\r\n              direction = {0, 1, 0},\r\n              type = 3,\r\n              size = {s, s, s},\r\n              orientation = {0, 0, 0},\r\n              max_distance = 0,\r\n              debug = false\r\n            })\r\n\r\n            local obj = nil\r\n            for _, v in pairs(hits) do\r\n              if v.hit_object ~= self and v.hit_object and v.hit_object.guid then\r\n                if v.hit_object.hasTag(\"Dice\") then\r\n                  if issuccesss(v.hit_object.getRotationValue()) then\r\n                    total = total - 1\r\n                    self.UI.setAttribute(\"success\", \"text\", total)\r\n                    self.UI.setAttribute(\"success\", \"color\", \"#fff5e2\")\r\n                  end\r\n\r\n                  if not obj then\r\n                    obj = v.hit_object\r\n                  else\r\n                    v.hit_object.destruct()\r\n                  end\r\n                else\r\n                  local p = self.getPosition():setAt(\"y\", 3)\r\n                  v.hit_object.setPosition(p:setAt(\"z\", p.z - self.getBoundsNormalized().size.z))\r\n                end\r\n              end\r\n            end\r\n\r\n            if not obj then\r\n              obj = spawnObjectData({\r\n                data = getDiceData(p:setAt(\"y\", 1 + 0.523))\r\n              })\r\n            end\r\n\r\n            obj.interactable = false\r\n\r\n            Wait.time(function()\r\n            local pos = obj.getPosition() + Vector(0, 0, 5)\r\n            obj.setPositionSmooth(pos, false, true)\r\n              Wait.time(function()\r\n                obj.setAngularVelocity(Vector(50, 50, 50))\r\n              end, 0.3)\r\n              runAfterRest(obj, function(obj)\r\n                obj.randomize()\r\n                runAfterRest(obj, function(obj)\r\n                  for _, rv in pairs(obj.getRotationValues()) do\r\n                    if rv.value == obj.getRotationValue() then\r\n\r\n                      if issuccesss(rv.value) then\r\n                        total = total + 1\r\n                        self.UI.setAttribute(\"success\", \"text\", total)\r\n                        self.UI.setAttribute(\"success\", \"color\", \"#fff5e2\")\r\n                      end\r\n\r\n                      obj.setRotation(rv.rotation)\r\n                      obj.setPositionSmooth(p:setAt(\"z\", p.z):setAt(\"y\", 2.57), false, true)\r\n                      runAfterRest(obj, function(obj)\r\n                        obj.interactable = true\r\n                        self.UI.setAttribute(\"icon_dice_\" .. i, \"active\", \"false\")\r\n                        self.UI.setAttribute(\"dice_\" .. i, \"text\", i)\r\n                        self.UI.setAttribute(\"dice_\" .. i, \"textColor\", \"#a29c90\")\r\n                        countFinishedDice = countFinishedDice + 1\r\n\r\n                        if countFinishedDice == nSelected then\r\n                          isRolling = false\r\n                          numberSet = {}\r\n                          setSucess(total, playerColor)\r\n                          local rerollCount = tonumber(self.UI.getAttribute(\"reroll\", \"text\"))\r\n                          self.UI.setAttribute(\"reroll\", \"text\", rerollCount + 1)\r\n                          self.UI.setAttribute(\"reroll\", \"color\", \"#fff5e2\")\r\n                          local rerolled_dicesCount = tonumber(self.UI.getAttribute(\"rerolled_dices\", \"text\"))\r\n                          self.UI.setAttribute(\"rerolled_dices\", \"text\", rerolled_dicesCount + nSelected)\r\n                          self.UI.setAttribute(\"rerolled_dices\", \"color\", \"#fff5e2\")\r\n                        end\r\n                      end)\r\n                    end\r\n                  end\r\n                end)\r\n              end)\r\n            end, 1)\r\n\r\n          elseif color == \"#a29c90\" then\r\n            self.UI.setAttribute(\"dice_\" .. i, \"textColor\", color)\r\n          else\r\n            self.UI.setAttribute(\"dice_\" .. i, \"textColor\", \"#fff5e2\")\r\n          end\r\n        end\r\n      end\r\n    end, 1)\r\n  end\r\nend\r\n\r\nfunction setSucess(value, playerColor)\r\n  if value == 0 then\r\n    broadcastToAll(playerColor.steam_name .. \" провалив перевірку! \", \"Red\")\r\n  elseif value == 1 then\r\n    broadcastToAll(playerColor.steam_name .. \" має \" .. value..\" успіх!\", \"Green\")\r\n  elseif value < 5 then\r\n    broadcastToAll(playerColor.steam_name .. \" має \" .. value..\" успіхи!\", \"Green\")\r\n  else\r\n    broadcastToAll(playerColor.steam_name .. \" має \" .. value..\" успіхів!\", \"Green\")\r\n  end\r\n  local success_color = \"#a29c90\"\r\n  if value > 0 then\r\n    success_color = \"#fff5e2\"\r\n  end\r\n  self.UI.setAttribute(\"success\", \"text\", value)\r\n  self.UI.setAttribute(\"success\", \"color\", success_color)\r\n  self.UI.setAttribute(\"success_additional\", \"text\", value)\r\n  self.UI.setAttribute(\"success_additional\", \"color\", success_color)\r\nend\r\n\r\nfunction issuccesss(value)\r\n  local value = tonumber(value)\r\n  return (rollerData.type == 1 and value >= 5) or (rollerData.type == 2 and value >= 4) or (rollerData.type == 3 and value == 6)\r\nend\r\n\r\nfunction getDiceImage()\r\n  if rollerData.type == 1 then\r\n    return \"https://drive.google.com/uc?export=view&id=1ei-eki7jgVPGAUOgsbIb-EvYVP1qMM9u\"\r\n  elseif rollerData.type == 2 then\r\n    return \"https://drive.google.com/uc?export=view&id=1UsEVYLoPfqJNlcdP2uwVmpZ9ALgctO9L\"\r\n  elseif rollerData.type == 3 then\r\n    return \"https://drive.google.com/uc?export=view&id=1Qh1q7YFQvBvZ1QGBxhsIMIWDsFAHdj1z\"\r\n  end\r\nend\r\n\r\nlocal rotationValues = {{\r\n  Rotation = {\r\n    x = -90,\r\n    y = 0,\r\n    z = 0\r\n  },\r\n  Value = \"1\"\r\n}, {\r\n  Rotation = {\r\n    x = 0,\r\n    y = 0,\r\n    z = 0\r\n  },\r\n  Value = \"2\"\r\n}, {\r\n  Rotation = {\r\n    x = 0,\r\n    y = 0,\r\n    z = -90\r\n  },\r\n  Value = \"3\"\r\n}, {\r\n  Rotation = {\r\n    x = 0,\r\n    y = 0,\r\n    z = 90\r\n  },\r\n  Value = \"4\"\r\n}, {\r\n  Rotation = {\r\n    x = 0,\r\n    y = 0,\r\n    z = -180\r\n  },\r\n  Value = \"5\"\r\n}, {\r\n  Rotation = {\r\n    x = 90,\r\n    y = 0,\r\n    z = 0\r\n  },\r\n  Value = \"6\"\r\n}}\r\n\r\nfunction getRandomDiceRotation()\r\n  local index = math.random(1, #rotationValues)\r\n  return rotationValues[index].Rotation\r\nend\r\n\r\nfunction getDiceData(pos)\r\n  local imageURL = getDiceImage()\r\n  if not imageURL then\r\n    return\r\n  end\r\n  local rotation = getRandomDiceRotation()\r\n  return {\r\n    AltLookAngle = {\r\n      x = 0,\r\n      y = 0,\r\n      z = 0\r\n    },\r\n    Autoraise = true,\r\n    ColorDiffuse = {\r\n      a = 1,\r\n      b = 1,\r\n      g = 1,\r\n      r = 1\r\n    },\r\n    CustomImage = {\r\n      CustomDice = {\r\n        Type = 1\r\n      },\r\n      ImageScalar = 1,\r\n      ImageSecondaryURL = \"\",\r\n      ImageURL = imageURL,\r\n      WidthScale = 0\r\n    },\r\n    Description = \"\",\r\n    DragSelectable = true,\r\n    GMNotes = \"\",\r\n    Grid = true,\r\n    GridProjection = false,\r\n    Hands = false,\r\n    HideWhenFaceDown = false,\r\n    IgnoreFoW = false,\r\n    LayoutGroupSortIndex = 0,\r\n    Locked = false,\r\n    LuaScript = \"\",\r\n    LuaScriptState = \"\",\r\n    MeasureMovement = false,\r\n    Name = \"Custom_Dice\",\r\n    Nickname = \"\",\r\n    RotationValues = rotationValues,\r\n    Snap = true,\r\n    Sticky = true,\r\n    Tags = {\"Dice\"},\r\n    Tooltip = true,\r\n    Transform = {\r\n      posX = pos.x,\r\n      posY = pos.y,\r\n      posZ = pos.z,\r\n      rotX = rotation.x,\r\n      rotY = rotation.y,\r\n      rotZ = rotation.z,\r\n      scaleX = 1.1000000238418579,\r\n      scaleY = 1.1000000238418579,\r\n      scaleZ = 1.1000000238418579\r\n    },\r\n    Value = 0,\r\n    XmlUI = \"\"\r\n  }\r\nend\r\n\r\nfunction upCast(obj, dist, offset, multi)\r\n  if obj == nil then\r\n    return\r\n  end\r\n  local dist = dist or 1\r\n  local offset = offset or 0\r\n  local multi = multi or 1\r\n  local oPos = obj.getPosition()\r\n  local oBounds = obj.getBoundsNormalized()\r\n  local oRot = obj.getRotation()\r\n  local orig = {oPos[1], oPos[2] + dist / 2 + oBounds.size.y / 2 + offset, oPos[3]}\r\n  local siz = {oBounds.size.x * multi, dist, oBounds.size.z * multi}\r\n  local orient = {oRot[1], oRot[2], oRot[3]}\r\n  local hits = Physics.cast({\r\n    origin = orig,\r\n    direction = {0, 1, 0},\r\n    type = 3,\r\n    size = siz,\r\n    orientation = orient,\r\n    max_distance = 0,\r\n    debug = false\r\n  })\r\n  local hitObjects = {}\r\n  for i, v in pairs(hits) do\r\n    if v.hit_object ~= obj then\r\n      table.insert(hitObjects, v.hit_object)\r\n    end\r\n  end\r\n  return hitObjects\r\nend\r\n\r\nfunction runAfterRest(o, f, f2, n)\r\n  f = f or function()\r\n  end -- function to run when resting\r\n  f2 = f2 or function()\r\n  end -- function to run when time-out is reached\r\n  n = n or 5 -- time out delay in seconds\r\n  Wait.frames(function()\r\n    Wait.condition(function()\r\n      if o ~= nil then\r\n        f(o)\r\n      end\r\n    end, function()\r\n      if o == nil then\r\n        return true\r\n      else\r\n        return o.resting\r\n      end\r\n    end, n, function()\r\n      if o ~= nil then\r\n        f2(o)\r\n      end\r\n    end)\r\n  end, 1)\r\nend\r\n\r\nfunction getSetSize(set)\r\n  local count = 0\r\n  for _ in pairs(set) do\r\n    count = count + 1\r\n  end\r\n  return count\r\nend\r\n\r\nfunction gPos(s, h)\r\n  if s and h then\r\n    local pos = s.positionToLocal(h.getPosition())\r\n    local formattedPos = {string.format(\"%.3f\", pos[1]), string.format(\"%.3f\", pos[2]), string.format(\"%.3f\", pos[3])}\r\n    local rot = s.positionToLocal(h.getRotation())\r\n    local formattedRot = {string.format(\"%.3f\", rot[1]), string.format(\"%.3f\", rot[2]), string.format(\"%.3f\", rot[3])}\r\n    log(\"[\" .. s.guid .. \"] = {\\npos=\" .. serpent.tts(formattedPos))\r\n  end\r\nend\nend)\n__bundle_register(\"util/serpent\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal n, v = \"serpent\", \"0.303\" -- (C) 2012-18 Paul Kulchenko; MIT License\nlocal c, d = \"Paul Kulchenko\", \"Lua serializer and pretty printer\"\nlocal snum = {[tostring(1/0)]='1/0 --[[math.huge]]',[tostring(-1/0)]='-1/0 --[[-math.huge]]',[tostring(0/0)]='0/0'}\nlocal badtype = {thread = true, userdata = true, cdata = true}\nlocal getmetatable = debug and debug.getmetatable or getmetatable\nlocal pairs = function(t) return next, t end -- avoid using __pairs in Lua 5.2+\nlocal keyword, globals, G = {}, {}, (_G or _ENV)\nfor _,k in ipairs({'and', 'break', 'do', 'else', 'elseif', 'end', 'false',\n  'for', 'function', 'goto', 'if', 'in', 'local', 'nil', 'not', 'or', 'repeat',\n  'return', 'then', 'true', 'until', 'while'}) do keyword[k] = true end\nfor k,v in pairs(G) do globals[v] = k end -- build func to name mapping\nfor _,g in ipairs({'coroutine', 'debug', 'io', 'math', 'string', 'table', 'os'}) do\n  for k,v in pairs(type(G[g]) == 'table' and G[g] or {}) do globals[v] = g..'.'..k end end\n\nlocal function s(t, opts)\n  local name, indent, fatal, maxnum = opts.name, opts.indent, opts.fatal, opts.maxnum\n  local sparse, custom, huge = opts.sparse, opts.custom, not opts.nohuge\n  local space, maxl = (opts.compact and '' or ' '), (opts.maxlevel or math.huge)\n  local maxlen, metatostring = tonumber(opts.maxlength), opts.metatostring\n  local iname, comm = '_'..(name or ''), opts.comment and (tonumber(opts.comment) or math.huge)\n  local numformat = opts.numformat or \"%.17g\"\n  local seen, sref, syms, symn = {}, {'local '..iname..'={}'}, {}, 0\n  local function gensym(val) return '_'..(tostring(tostring(val)):gsub(\"[^%w]\",\"\"):gsub(\"(%d%w+)\",\n    -- tostring(val) is needed because __tostring may return a non-string value\n    function(s) if not syms[s] then symn = symn+1; syms[s] = symn end return tostring(syms[s]) end)) end\n  local function safestr(s) return type(s) == \"number\" and (huge and snum[tostring(s)] or numformat:format(s))\n    or type(s) ~= \"string\" and tostring(s) -- escape NEWLINE/010 and EOF/026\n    or (\"%q\"):format(s):gsub(\"\\010\",\"n\"):gsub(\"\\026\",\"\\\\026\") end\n  -- handle radix changes in some locales\n  if opts.fixradix and (\".1f\"):format(1.2) ~= \"1.2\" then\n    local origsafestr = safestr\n    safestr = function(s) return type(s) == \"number\"\n      and (nohuge and snum[tostring(s)] or numformat:format(s):gsub(\",\",\".\")) or origsafestr(s)\n    end\n  end\n  local function comment(s,l) return comm and (l or 0) < comm and ' --[['..select(2, pcall(tostring, s))..']]' or '' end\n  local function globerr(s,l) return globals[s] and globals[s]..comment(s,l) or not fatal\n    and safestr(select(2, pcall(tostring, s))) or error(\"Can't serialize \"..tostring(s)) end\n  local function safename(path, name) -- generates foo.bar, foo[3], or foo['b a r']\n    local n = name == nil and '' or name\n    local plain = type(n) == \"string\" and n:match(\"^[%l%u_][%w_]*$\") and not keyword[n]\n    local safe = plain and n or '['..safestr(n)..']'\n    return (path or '')..(plain and path and '.' or '')..safe, safe end\n  local alphanumsort = type(opts.sortkeys) == 'function' and opts.sortkeys or function(k, o, n) -- k=keys, o=originaltable, n=padding\n    local maxn, to = tonumber(n) or 12, {number = 'a', string = 'b'}\n    local function padnum(d) return (\"%0\"..tostring(maxn)..\"d\"):format(tonumber(d)) end\n    table.sort(k, function(a,b)\n      -- sort numeric keys first: k[key] is not nil for numerical keys\n      return (k[a] ~= nil and 0 or to[type(a)] or 'z')..(tostring(a):gsub(\"%d+\",padnum))\n           < (k[b] ~= nil and 0 or to[type(b)] or 'z')..(tostring(b):gsub(\"%d+\",padnum)) end) end\n  local function val2str(t, name, indent, insref, path, plainindex, level)\n    local ttype, level, mt = type(t), (level or 0), getmetatable(t)\n    local spath, sname = safename(path, name)\n    local tag = plainindex and\n      ((type(name) == \"number\") and '' or name..space..'='..space) or\n      (name ~= nil and sname..space..'='..space or '')\n    if seen[t] then -- already seen this element\n      sref[#sref+1] = spath..space..'='..space..seen[t]\n      return tag..'nil'..comment('ref', level)\n    end\n    -- protect from those cases where __tostring may fail\n    if type(mt) == 'table' and metatostring ~= false then\n      local to, tr = pcall(function() return mt.__tostring(t) end)\n      local so, sr = pcall(function() return mt.__serialize(t) end)\n      if (to or so) then -- knows how to serialize itself\n        seen[t] = insref or spath\n        t = so and sr or tr\n        ttype = type(t)\n      end -- new value falls through to be serialized\n    end\n    if ttype == \"table\" then\n      if level >= maxl then return tag..'{}'..comment('maxlvl', level) end\n      seen[t] = insref or spath\n      if next(t) == nil then return tag..'{}'..comment(t, level) end -- table empty\n      if maxlen and maxlen < 0 then return tag..'{}'..comment('maxlen', level) end\n      local maxn, o, out = math.min(#t, maxnum or #t), {}, {}\n      for key = 1, maxn do o[key] = key end\n      if not maxnum or #o < maxnum then\n        local n = #o -- n = n + 1; o[n] is much faster than o[#o+1] on large tables\n        for key in pairs(t) do\n          if o[key] ~= key then n = n + 1; o[n] = key end\n        end\n      end\n      if maxnum and #o > maxnum then o[maxnum+1] = nil end\n      if opts.sortkeys and #o > maxn then alphanumsort(o, t, opts.sortkeys) end\n      local sparse = sparse and #o > maxn -- disable sparsness if only numeric keys (shorter output)\n      for n, key in ipairs(o) do\n        local value, ktype, plainindex = t[key], type(key), n <= maxn and not sparse\n        if opts.valignore and opts.valignore[value] -- skip ignored values; do nothing\n        or opts.keyallow and not opts.keyallow[key]\n        or opts.keyignore and opts.keyignore[key]\n        or opts.valtypeignore and opts.valtypeignore[type(value)] -- skipping ignored value types\n        or sparse and value == nil then -- skipping nils; do nothing\n        elseif ktype == 'table' or ktype == 'function' or badtype[ktype] then\n          if not seen[key] and not globals[key] then\n            sref[#sref+1] = 'placeholder'\n            local sname = safename(iname, gensym(key)) -- iname is table for local variables\n            sref[#sref] = val2str(key,sname,indent,sname,iname,true)\n          end\n          sref[#sref+1] = 'placeholder'\n          local path = seen[t]..'['..tostring(seen[key] or globals[key] or gensym(key))..']'\n          sref[#sref] = path..space..'='..space..tostring(seen[value] or val2str(value,nil,indent,path))\n        else\n          out[#out+1] = val2str(value,key,indent,nil,seen[t],plainindex,level+1)\n          if maxlen then\n            maxlen = maxlen - #out[#out]\n            if maxlen < 0 then break end\n          end\n        end\n      end\n      local prefix = string.rep(indent or '', level)\n      local head = indent and '{\\n'..prefix..indent or '{'\n      local body = table.concat(out, ','..(indent and '\\n'..prefix..indent or space))\n      local tail = indent and \"\\n\"..prefix..'}' or '}'\n      return (custom and custom(tag,head,body,tail,level) or tag..head..body..tail)..comment(t, level)\n    elseif badtype[ttype] then\n      seen[t] = insref or spath\n      return tag..globerr(t, level)\n    elseif ttype == 'function' then\n      seen[t] = insref or spath\n      if opts.nocode then return tag..\"function() --[[..skipped..]] end\"..comment(t, level) end\n      local ok, res = pcall(string.dump, t)\n      local func = ok and \"((loadstring or load)(\"..safestr(res)..\",'@serialized'))\"..comment(t, level)\n      return tag..(func or globerr(t, level))\n    else return tag..safestr(t) end -- handle all other types\n  end\n  local sepr = indent and \"\\n\" or \";\"..space\n  local body = val2str(t, name, indent) -- this call also populates sref\n  local tail = #sref>1 and table.concat(sref, sepr)..sepr or ''\n  local warn = opts.comment and #sref>1 and space..\"--[[incomplete output with shared/self-references skipped]]\" or ''\n  return not name and body..warn or \"do local \"..body..sepr..tail..\"return \"..name..sepr..\"end\"\nend\n\nlocal function deserialize(data, opts)\n  local env = (opts and opts.safe == false) and G\n    or setmetatable({}, {\n        __index = function(t,k) return t end,\n        __call = function(t,...) error(\"cannot call functions\") end\n      })\n  local f, res = (loadstring or load)('return '..data, nil, nil, env)\n  if not f then f, res = (loadstring or load)(data, nil, nil, env) end\n  if not f then return f, res end\n  if setfenv then setfenv(f, env) end\n  return pcall(f)\nend\n\nlocal function merge(a, b) if b then for k,v in pairs(b) do a[k] = v end end; return a; end\nreturn { _NAME = n, _COPYRIGHT = c, _DESCRIPTION = d, _VERSION = v, serialize = s,\n  load = deserialize,\n  dump = function(a, opts) return s(a, merge({name = '_', compact = true, sparse = true}, opts)) end,\n  line = function(a, opts) return s(a, merge({sortkeys = true, comment = true}, opts)) end,\n  block = function(a, opts) return s(a, merge({indent = '  ', sortkeys = true, comment = true}, opts)) end,\n  tts = function(a, opts)\n    return s(a, merge({\n      indent = '  ',\n      sortkeys = true,\n      comment = false,\n      metatostring = false,\n    },\n    opts))\n  end\n}\nend)\nreturn __bundle_require(\"__root\")",
      "LuaScriptState": "",
      "MeasureMovement": false,
      "Memo": "ah_roller",
      "Name": "Custom_Tile",
      "Nickname": "Roller",
      "Snap": true,
      "Sticky": true,
      "Tooltip": true,
      "Transform": {
        "posX": 63.242,
        "posY": 4.041,
        "posZ": 58.028,
        "rotX": 357,
        "rotY": 182,
        "rotZ": 0,
        "scaleX": 1.15,
        "scaleY": 1,
        "scaleZ": 1.15
      },
      "Value": 0,
      "XmlUI": "<defaults>\r\n\t<text font=\"Fonts/AdonisC\" />\r\n\t<button font=\"Fonts/AdonisC\" />\r\n</defaults>\r\n<button\r\n\tid=\"help\"\r\n\tonClick=\"Global/showHelp\"\r\n\twidth=\"400\"\r\n\theight=\"400\"\r\n\tposition=\"540 -52 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\tcolor=\"clear\"\r\n\ttext=\"\"/>\r\n<panel\r\n\tinteractable=\"false\"\r\n\tid=\"results\"\r\n\twidth=\"170\"\r\n\theight=\"160\"\r\n\tposition=\"430 0 -22\"\r\n\trotation=\"0 0 180\"\r\n    onMouseEnter=\"hoverResultsEnter\"\r\n    onMouseExit=\"hoverResultsExit\">\r\n    <Panel id=\"results_default\" active=\"true\">\r\n\t\t<text\r\n\t\t\tid=\"success\"\r\n\t\t\twidth=\"640\"\r\n\t\t\theight=\"640\"\r\n\t\t\tposition=\"0 -25 0\"\r\n\t\t\tscale=\"0.35 0.35 1\"\r\n\t\t\tcolor=\"#a29c90\"\r\n\t\t\tfont=\"Fonts/AdonisC\"\r\n\t\t\tfontSize=\"1000\"\r\n\t\t\ttext=\"?\"/>\r\n    </Panel>\r\n    <Panel id=\"results_hover\" active=\"false\">\r\n\t\t<Text text=\"успіхів\" fontSize=\"30\" color=\"#a29c90\" position=\"-40 5 0\" />\r\n\t\t<Text id=\"success_additional\" text=\"?\" fontSize=\"90\" color=\"#a29c90\" position=\"35 20 0\" />\r\n\t\t<Text text=\"перекидів всього\" fontSize=\"16\" color=\"#a29c90\" position=\"-40 -30 0\" />\r\n\t\t<Text id=\"reroll\" text=\"0\" fontSize=\"22\" color=\"#a29c90\"  position=\"40 -30 0\" />\r\n\t\t<Text text=\"перекинуто кубів\" fontSize=\"16\" color=\"#a29c90\" position=\"-40 -60 0\" />\r\n\t\t<Text id=\"rerolled_dices\" text=\"0\" fontSize=\"22\" color=\"#a29c90\" position=\"40 -60 0\" />\r\n    </Panel>\r\n</panel>\r\n<button\r\n\tid=\"dice_1\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"306 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"1\"/>\r\n<image\r\n\tid=\"icon_dice_1\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"306 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_2\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"231 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"2\"/>\r\n<image\r\n\tid=\"icon_dice_2\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"231 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_3\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"157 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"3\"/>\r\n<image\r\n\tid=\"icon_dice_3\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"157 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_4\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"82 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"4\"/>\r\n<image\r\n\tid=\"icon_dice_4\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"82 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_5\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"7 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"5\"/>\r\n<image\r\n\tid=\"icon_dice_5\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"7 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_6\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"-67 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"6\"/>\r\n<image\r\n\tid=\"icon_dice_6\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"-67 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_7\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"-142 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"7\"/>\r\n<image\r\n\tid=\"icon_dice_7\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"-142 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_8\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"-216 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"8\"/>\r\n<image\r\n\tid=\"icon_dice_8\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"-216 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_9\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"-291 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"9\"/>\r\n<image\r\n\tid=\"icon_dice_9\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"-291 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_10\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"-366 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"10\"/>\r\n<image\r\n\tid=\"icon_dice_10\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"-366 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_11\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"-440 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"11\"/>\r\n<image\r\n\tid=\"icon_dice_11\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"-440 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>\r\n<button\r\n\tid=\"dice_12\"\r\n\tonClick=\"dice_btn\"\r\n\twidth=\"640\"\r\n\theight=\"640\"\r\n\tposition=\"-515 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n\ttextColor=\"#4d4a44\"\r\n\tcolor=\"clear\"\r\n\tfont=\"Fonts/AdonisC\"\r\n\tfontSize=\"800\"\r\n\tpadding=\"0 0 80 0\"\r\n\ttext=\"12\"/>\r\n<image\r\n\tid=\"icon_dice_12\"\r\n    active=\"false\"\r\n\timage=\"reeoll_icon\"\r\n\twidth=\"500\"\r\n\theight=\"500\"\r\n\tposition=\"-515 42 -22\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.115 0.115 1\"\r\n/>"
    }
  ],
  "Description": "",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "2a2043",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "MaterialIndex": -1,
  "MeasureMovement": false,
  "MeshIndex": -1,
  "Name": "Infinite_Bag",
  "Nickname": "",
  "Snap": true,
  "Sticky": true,
  "Tooltip": true,
  "Transform": {
    "posX": -20.58,
    "posY": 1.983,
    "posZ": 36.705,
    "rotX": 0,
    "rotY": 180,
    "rotZ": 0,
    "scaleX": 1,
    "scaleY": 1,
    "scaleZ": 1
  },
  "Value": 0
}