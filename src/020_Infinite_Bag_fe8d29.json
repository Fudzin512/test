{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 0.37256,
    "r": 0.30589
  },
  "ContainedObjects": [
    {
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": -0.54,
            "y": 0.2,
            "z": -0.034
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_mat"
          ]
        },
        {
          "Position": {
            "x": -1.609,
            "y": 0.2,
            "z": -0.034
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_mat"
          ]
        },
        {
          "Position": {
            "x": -2.688,
            "y": 0.2,
            "z": -0.035
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_mat"
          ]
        },
        {
          "Position": {
            "x": 0.54,
            "y": 0.2,
            "z": -0.034
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_mat"
          ]
        },
        {
          "Position": {
            "x": 1.609,
            "y": 0.2,
            "z": -0.034
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_mat"
          ]
        },
        {
          "Position": {
            "x": 2.688,
            "y": 0.2,
            "z": -0.034
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_mat"
          ]
        },
        {
          "Position": {
            "x": 2.688,
            "y": 0.2,
            "z": -0.176
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_magnet"
          ]
        },
        {
          "Position": {
            "x": 1.609,
            "y": 0.2,
            "z": -0.176
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_magnet"
          ]
        },
        {
          "Position": {
            "x": 0.532,
            "y": 0.2,
            "z": -0.177
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_magnet"
          ]
        },
        {
          "Position": {
            "x": -0.54,
            "y": 0.2,
            "z": -0.177
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_magnet"
          ]
        },
        {
          "Position": {
            "x": -1.609,
            "y": 0.2,
            "z": -0.177
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_magnet"
          ]
        },
        {
          "Position": {
            "x": -2.688,
            "y": 0.2,
            "z": -0.177
          },
          "Rotation": {
            "x": 0,
            "y": 0,
            "z": 0
          },
          "Tags": [
            "item_magnet"
          ]
        }
      ],
      "Autoraise": true,
      "ColorDiffuse": {
        "b": 0.24999,
        "g": 0.24999,
        "r": 0.24999
      },
      "CustomImage": {
        "CustomTile": {
          "Stackable": false,
          "Stretch": true,
          "Thickness": 0.2,
          "Type": 0
        },
        "ImageScalar": 1,
        "ImageSecondaryURL": "",
        "ImageURL": "https://drive.google.com/uc?export=view&id=1MprDIapt9_jwBuvQC9BM23HdyEEz0VC5",
        "WidthScale": 0
      },
      "CustomUIAssets": [
        {
          "Name": "cards_icon",
          "Type": 0,
          "URL": "https://drive.google.com/uc?export=view&id=1P_bTtQ38TT0v5Fm1s632XzyV7KHLPa_s"
        }
      ],
      "Description": "",
      "DragSelectable": true,
      "GMNotes": "",
      "GUID": "8391f2",
      "Grid": true,
      "GridProjection": false,
      "Hands": false,
      "HideWhenFaceDown": false,
      "IgnoreFoW": false,
      "LayoutGroupSortIndex": 0,
      "Locked": false,
      "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nserpent = require(\"util/serpent\")\r\n\r\nlocal itemData = {\r\n maxRows = 5,\r\n index = 1,\r\n isActive = false,\r\n isSpawned = false\r\n}\r\n\r\nfunction onLoad(savedData)\r\n\tlocal parsedSaveData = parseJson(savedData)\r\n  if parsedSaveData then\r\n    itemData = parsedSaveData\r\n\t\tif itemData.index > 1 then\r\n\t\t\tself.setLock(true)\r\n\t\t\tself.interactable = false\r\n\t\t\tself.drag_selectable = false\r\n\t\t\tself.gizmo_selectable = false\r\n\t\tend\r\n  end\r\n\r\n\tsetIndex(itemData.index)\r\nend\r\n\r\nfunction onSave()\r\n  local saveData = JSON.encode(itemData)\r\n  return saveData\r\nend\r\n\r\nfunction row(player, alt, id)\r\n\tif (alt == \"-1\" or alt == -1) and itemData.index < itemData.maxRows then\r\n\t\tspawnObj(itemData.index+1)\r\n\t\titemData.isActive = false\r\n\telseif (alt == \"-2\" or alt == -2) and itemData.index > 1 then\r\n\t\tlocal foundItemsMat = nil\r\n\t\tlocal objs = upCast(self, 0.2, nil, 0.1, \"top\")\r\n\t\tfor i, obj in pairs(objs) do\r\n\t\t\tfoundItemsMat = obj\r\n\t\tend\r\n\r\n\t\tif not foundItemsMat then return end\r\n\t\titemData.isActive = false\r\n\t\tfoundItemsMat.call(\"setIndex\", itemData.index-1)\r\n\t\tself.destruct()\r\n\tend\r\n\r\n\tself.UI.setAttribute(\"rowBtn\", \"active\", itemData.isActive)\r\nend\r\n\r\nfunction spawnObj(value)\r\n\tlocal data = self.getData()\r\n\tdata.Transform.posZ = data.Transform.posZ - self.getBoundsNormalized().size.z\r\n\tlocal object = spawnObjectData({\r\n    data = data,\r\n    callback_function = function(spawned_object)\r\n\t\tspawned_object.call(\"setIndex\", itemData.index+1)\r\n\t\tspawned_object.setLock(true)\r\n    spawned_object.interactable = false\r\n    spawned_object.drag_selectable = false\r\n    spawned_object.gizmo_selectable = false\r\n    end\r\n})\r\nend\r\n\r\nfunction setIndex(value)\r\n\titemData.index = value\r\n\titemData.isActive = itemData.index <= itemData.maxRows and itemData.index >= 1\r\n\tself.UI.setAttribute(\"rowBtn\", \"active\", itemData.isActive)\r\nend\r\n\r\nfunction upCast(obj, dist, offset, multi, add)\r\n  if obj == nil then\r\n    return\r\n  end -- object to cast up from\r\n  local dist = dist or 1 -- distance to cast in Y world units\r\n  local offset = offset or 0 -- distance above the surface of obj to begin the cast\r\n  local multi = multi or 1 -- multiplier of the X and Z world units of the object\r\n  local oPos = obj.getPosition()\r\n  local oBounds = obj.getBoundsNormalized()\r\n  local oRot = obj.getRotation()\r\n\toPos[3] = oPos[3] + (add == \"bottom\" and -oBounds.size.z or oBounds.size.z)\r\n  local orig = {oPos[1], oPos[2] + dist / 2 + oBounds.size.y / 2 + offset, oPos[3]}\r\n  local siz = {oBounds.size.x * multi, dist, oBounds.size.z * multi}\r\n  local orient = {oRot[1], oRot[2], oRot[3]}\r\n  local hits = Physics.cast({\r\n    origin = orig,\r\n    direction = {0, 1, 0},\r\n    type = 3,\r\n    size = siz,\r\n    orientation = orient,\r\n    max_distance = 0,\r\n    debug = false -- set this to false once you're happy with the result\r\n  })\r\n  local hitObjects = {}\r\n  for i, v in pairs(hits) do\r\n    if v.hit_object ~= obj then\r\n      table.insert(hitObjects, v.hit_object)\r\n    end\r\n  end\r\n  return hitObjects\r\nend\r\n\r\nfunction parseJson(memo)\r\n  if not memo or type(memo) ~= \"string\" then\r\n    return nil\r\n  end\r\n\r\n  local success, result = pcall(function()\r\n    return JSON.decode(memo)\r\n  end)\r\n\r\n  if success then\r\n    return result\r\n  else\r\n    return nil\r\n  end\r\nend\nend)\n__bundle_register(\"util/serpent\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal n, v = \"serpent\", \"0.303\" -- (C) 2012-18 Paul Kulchenko; MIT License\nlocal c, d = \"Paul Kulchenko\", \"Lua serializer and pretty printer\"\nlocal snum = {[tostring(1/0)]='1/0 --[[math.huge]]',[tostring(-1/0)]='-1/0 --[[-math.huge]]',[tostring(0/0)]='0/0'}\nlocal badtype = {thread = true, userdata = true, cdata = true}\nlocal getmetatable = debug and debug.getmetatable or getmetatable\nlocal pairs = function(t) return next, t end -- avoid using __pairs in Lua 5.2+\nlocal keyword, globals, G = {}, {}, (_G or _ENV)\nfor _,k in ipairs({'and', 'break', 'do', 'else', 'elseif', 'end', 'false',\n  'for', 'function', 'goto', 'if', 'in', 'local', 'nil', 'not', 'or', 'repeat',\n  'return', 'then', 'true', 'until', 'while'}) do keyword[k] = true end\nfor k,v in pairs(G) do globals[v] = k end -- build func to name mapping\nfor _,g in ipairs({'coroutine', 'debug', 'io', 'math', 'string', 'table', 'os'}) do\n  for k,v in pairs(type(G[g]) == 'table' and G[g] or {}) do globals[v] = g..'.'..k end end\n\nlocal function s(t, opts)\n  local name, indent, fatal, maxnum = opts.name, opts.indent, opts.fatal, opts.maxnum\n  local sparse, custom, huge = opts.sparse, opts.custom, not opts.nohuge\n  local space, maxl = (opts.compact and '' or ' '), (opts.maxlevel or math.huge)\n  local maxlen, metatostring = tonumber(opts.maxlength), opts.metatostring\n  local iname, comm = '_'..(name or ''), opts.comment and (tonumber(opts.comment) or math.huge)\n  local numformat = opts.numformat or \"%.17g\"\n  local seen, sref, syms, symn = {}, {'local '..iname..'={}'}, {}, 0\n  local function gensym(val) return '_'..(tostring(tostring(val)):gsub(\"[^%w]\",\"\"):gsub(\"(%d%w+)\",\n    -- tostring(val) is needed because __tostring may return a non-string value\n    function(s) if not syms[s] then symn = symn+1; syms[s] = symn end return tostring(syms[s]) end)) end\n  local function safestr(s) return type(s) == \"number\" and (huge and snum[tostring(s)] or numformat:format(s))\n    or type(s) ~= \"string\" and tostring(s) -- escape NEWLINE/010 and EOF/026\n    or (\"%q\"):format(s):gsub(\"\\010\",\"n\"):gsub(\"\\026\",\"\\\\026\") end\n  -- handle radix changes in some locales\n  if opts.fixradix and (\".1f\"):format(1.2) ~= \"1.2\" then\n    local origsafestr = safestr\n    safestr = function(s) return type(s) == \"number\"\n      and (nohuge and snum[tostring(s)] or numformat:format(s):gsub(\",\",\".\")) or origsafestr(s)\n    end\n  end\n  local function comment(s,l) return comm and (l or 0) < comm and ' --[['..select(2, pcall(tostring, s))..']]' or '' end\n  local function globerr(s,l) return globals[s] and globals[s]..comment(s,l) or not fatal\n    and safestr(select(2, pcall(tostring, s))) or error(\"Can't serialize \"..tostring(s)) end\n  local function safename(path, name) -- generates foo.bar, foo[3], or foo['b a r']\n    local n = name == nil and '' or name\n    local plain = type(n) == \"string\" and n:match(\"^[%l%u_][%w_]*$\") and not keyword[n]\n    local safe = plain and n or '['..safestr(n)..']'\n    return (path or '')..(plain and path and '.' or '')..safe, safe end\n  local alphanumsort = type(opts.sortkeys) == 'function' and opts.sortkeys or function(k, o, n) -- k=keys, o=originaltable, n=padding\n    local maxn, to = tonumber(n) or 12, {number = 'a', string = 'b'}\n    local function padnum(d) return (\"%0\"..tostring(maxn)..\"d\"):format(tonumber(d)) end\n    table.sort(k, function(a,b)\n      -- sort numeric keys first: k[key] is not nil for numerical keys\n      return (k[a] ~= nil and 0 or to[type(a)] or 'z')..(tostring(a):gsub(\"%d+\",padnum))\n           < (k[b] ~= nil and 0 or to[type(b)] or 'z')..(tostring(b):gsub(\"%d+\",padnum)) end) end\n  local function val2str(t, name, indent, insref, path, plainindex, level)\n    local ttype, level, mt = type(t), (level or 0), getmetatable(t)\n    local spath, sname = safename(path, name)\n    local tag = plainindex and\n      ((type(name) == \"number\") and '' or name..space..'='..space) or\n      (name ~= nil and sname..space..'='..space or '')\n    if seen[t] then -- already seen this element\n      sref[#sref+1] = spath..space..'='..space..seen[t]\n      return tag..'nil'..comment('ref', level)\n    end\n    -- protect from those cases where __tostring may fail\n    if type(mt) == 'table' and metatostring ~= false then\n      local to, tr = pcall(function() return mt.__tostring(t) end)\n      local so, sr = pcall(function() return mt.__serialize(t) end)\n      if (to or so) then -- knows how to serialize itself\n        seen[t] = insref or spath\n        t = so and sr or tr\n        ttype = type(t)\n      end -- new value falls through to be serialized\n    end\n    if ttype == \"table\" then\n      if level >= maxl then return tag..'{}'..comment('maxlvl', level) end\n      seen[t] = insref or spath\n      if next(t) == nil then return tag..'{}'..comment(t, level) end -- table empty\n      if maxlen and maxlen < 0 then return tag..'{}'..comment('maxlen', level) end\n      local maxn, o, out = math.min(#t, maxnum or #t), {}, {}\n      for key = 1, maxn do o[key] = key end\n      if not maxnum or #o < maxnum then\n        local n = #o -- n = n + 1; o[n] is much faster than o[#o+1] on large tables\n        for key in pairs(t) do\n          if o[key] ~= key then n = n + 1; o[n] = key end\n        end\n      end\n      if maxnum and #o > maxnum then o[maxnum+1] = nil end\n      if opts.sortkeys and #o > maxn then alphanumsort(o, t, opts.sortkeys) end\n      local sparse = sparse and #o > maxn -- disable sparsness if only numeric keys (shorter output)\n      for n, key in ipairs(o) do\n        local value, ktype, plainindex = t[key], type(key), n <= maxn and not sparse\n        if opts.valignore and opts.valignore[value] -- skip ignored values; do nothing\n        or opts.keyallow and not opts.keyallow[key]\n        or opts.keyignore and opts.keyignore[key]\n        or opts.valtypeignore and opts.valtypeignore[type(value)] -- skipping ignored value types\n        or sparse and value == nil then -- skipping nils; do nothing\n        elseif ktype == 'table' or ktype == 'function' or badtype[ktype] then\n          if not seen[key] and not globals[key] then\n            sref[#sref+1] = 'placeholder'\n            local sname = safename(iname, gensym(key)) -- iname is table for local variables\n            sref[#sref] = val2str(key,sname,indent,sname,iname,true)\n          end\n          sref[#sref+1] = 'placeholder'\n          local path = seen[t]..'['..tostring(seen[key] or globals[key] or gensym(key))..']'\n          sref[#sref] = path..space..'='..space..tostring(seen[value] or val2str(value,nil,indent,path))\n        else\n          out[#out+1] = val2str(value,key,indent,nil,seen[t],plainindex,level+1)\n          if maxlen then\n            maxlen = maxlen - #out[#out]\n            if maxlen < 0 then break end\n          end\n        end\n      end\n      local prefix = string.rep(indent or '', level)\n      local head = indent and '{\\n'..prefix..indent or '{'\n      local body = table.concat(out, ','..(indent and '\\n'..prefix..indent or space))\n      local tail = indent and \"\\n\"..prefix..'}' or '}'\n      return (custom and custom(tag,head,body,tail,level) or tag..head..body..tail)..comment(t, level)\n    elseif badtype[ttype] then\n      seen[t] = insref or spath\n      return tag..globerr(t, level)\n    elseif ttype == 'function' then\n      seen[t] = insref or spath\n      if opts.nocode then return tag..\"function() --[[..skipped..]] end\"..comment(t, level) end\n      local ok, res = pcall(string.dump, t)\n      local func = ok and \"((loadstring or load)(\"..safestr(res)..\",'@serialized'))\"..comment(t, level)\n      return tag..(func or globerr(t, level))\n    else return tag..safestr(t) end -- handle all other types\n  end\n  local sepr = indent and \"\\n\" or \";\"..space\n  local body = val2str(t, name, indent) -- this call also populates sref\n  local tail = #sref>1 and table.concat(sref, sepr)..sepr or ''\n  local warn = opts.comment and #sref>1 and space..\"--[[incomplete output with shared/self-references skipped]]\" or ''\n  return not name and body..warn or \"do local \"..body..sepr..tail..\"return \"..name..sepr..\"end\"\nend\n\nlocal function deserialize(data, opts)\n  local env = (opts and opts.safe == false) and G\n    or setmetatable({}, {\n        __index = function(t,k) return t end,\n        __call = function(t,...) error(\"cannot call functions\") end\n      })\n  local f, res = (loadstring or load)('return '..data, nil, nil, env)\n  if not f then f, res = (loadstring or load)(data, nil, nil, env) end\n  if not f then return f, res end\n  if setfenv then setfenv(f, env) end\n  return pcall(f)\nend\n\nlocal function merge(a, b) if b then for k,v in pairs(b) do a[k] = v end end; return a; end\nreturn { _NAME = n, _COPYRIGHT = c, _DESCRIPTION = d, _VERSION = v, serialize = s,\n  load = deserialize,\n  dump = function(a, opts) return s(a, merge({name = '_', compact = true, sparse = true}, opts)) end,\n  line = function(a, opts) return s(a, merge({sortkeys = true, comment = true}, opts)) end,\n  block = function(a, opts) return s(a, merge({indent = '  ', sortkeys = true, comment = true}, opts)) end,\n  tts = function(a, opts)\n    return s(a, merge({\n      indent = '  ',\n      sortkeys = true,\n      comment = false,\n      metatostring = false,\n    },\n    opts))\n  end\n}\nend)\nreturn __bundle_require(\"__root\")",
      "LuaScriptState": "{\"index\":1,\"isActive\":true,\"isSpawned\":false,\"maxRows\":5}",
      "MeasureMovement": false,
      "Name": "Custom_Tile",
      "Nickname": "Items Mat",
      "Snap": true,
      "Sticky": true,
      "Tooltip": true,
      "Transform": {
        "posX": 74.845,
        "posY": 4.065,
        "posZ": 64.271,
        "rotX": 1,
        "rotY": 180,
        "rotZ": 0,
        "scaleX": 2.02,
        "scaleY": 1,
        "scaleZ": 2.01
      },
      "Value": 0,
      "XmlUI": "<panel\r\n\tid=\"rowBtn\"\r\n\twidth=\"300\"\r\n\theight=\"300\"\r\n\tposition=\"-300 120 -2\"\r\n\trotation=\"0 0 180\"\r\n\tscale=\"0.1 0.1 1\">\r\n\t<button\r\n\t\tonClick=\"row\"\r\n\t\twidth=\"300\"\r\n\t\theight=\"300\"\r\n\t\tcolor=\"clear\"/>\r\n\t<image\r\n\t\twidth=\"300\"\r\n\t\tpreserveAspect=\"true\"\r\n\t\timage=\"cards_icon\"/>\r\n</panel>"
    }
  ],
  "Description": "",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "fe8d29",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "MaterialIndex": -1,
  "MeasureMovement": false,
  "MeshIndex": -1,
  "Name": "Infinite_Bag",
  "Nickname": "",
  "Snap": true,
  "Sticky": true,
  "Tooltip": true,
  "Transform": {
    "posX": -14.856,
    "posY": 1.983,
    "posZ": 36.705,
    "rotX": 0,
    "rotY": 180,
    "rotZ": 0,
    "scaleX": 1,
    "scaleY": 1,
    "scaleZ": 1
  },
  "Value": 0
}